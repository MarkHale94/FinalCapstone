// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PharmaQueue.Data;

namespace PharmaQueue.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181212162749_PharmaQueue")]
    partial class PharmaQueue
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PharmaQueue.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("UserTypeId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "827cafad-2f71-44db-91a9-a23c1be0f038", AccessFailedCount = 0, ConcurrencyStamp = "a506997c-8738-4805-8da2-3d3691fbb265", Email = "admin@admin.com", EmailConfirmed = true, FirstName = "admin", LastName = "admin", LockoutEnabled = false, NormalizedEmail = "ADMIN@ADMIN.COM", NormalizedUserName = "ADMIN@ADMIN.COM", PasswordHash = "AQAAAAEAACcQAAAAEKIG87XSUBs5b9S9ePcG/t+7nxqCyhxj6WGwmqJuP1UahXOvDjX8GvrOL4dYPUmyrQ==", PhoneNumberConfirmed = false, SecurityStamp = "bc9a04b2-fd77-4cc1-b58c-18e31031fff0", TwoFactorEnabled = false, UserName = "admin@admin.com", UserTypeId = 1 },
                        new { Id = "b4cb0919-77b8-48ad-8603-166c33fde263", AccessFailedCount = 0, ConcurrencyStamp = "353aa89a-d979-457c-8669-2ef4c0df2866", Email = "CUSTOMER@CUSTOEMR.com", EmailConfirmed = true, FirstName = "customer", LastName = "customer", LockoutEnabled = false, NormalizedEmail = "CUSTOMER@CUSTOMER.COM", NormalizedUserName = "CUSTOMER@CUSTOMER.COM", PasswordHash = "AQAAAAEAACcQAAAAEKtG1AexAtrL4yQnxmm+LADKEt7WZvEfJctx5yU+5ZQMjVnnvXcSOWZWPYGMvWdrmg==", PhoneNumberConfirmed = false, SecurityStamp = "3b796eaf-9b4b-4573-8e03-3295a0849cdf", TwoFactorEnabled = false, UserName = "customer@customer.com", UserTypeId = 2 }
                    );
                });

            modelBuilder.Entity("PharmaQueue.Models.Prescription", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsSold");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("PrescriptionStatusId");

                    b.Property<double>("Price");

                    b.Property<int>("Quantity");

                    b.Property<int>("Refills");

                    b.Property<int?>("StatusId");

                    b.Property<string>("Strength")
                        .IsRequired();

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("PrescriptionId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Prescription");

                    b.HasData(
                        new { PrescriptionId = 1, DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsSold = false, Name = "Metformin", PrescriptionStatusId = 1, Price = 5.0, Quantity = 120, Refills = 4, Strength = "500mg", UserId = "b4cb0919-77b8-48ad-8603-166c33fde263" },
                        new { PrescriptionId = 2, DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsSold = false, Name = "Glipizide", PrescriptionStatusId = 1, Price = 30.0, Quantity = 30, Refills = 12, Strength = "2.5mg", UserId = "b4cb0919-77b8-48ad-8603-166c33fde263" },
                        new { PrescriptionId = 3, DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsSold = false, Name = "Benzonatate", PrescriptionStatusId = 2, Price = 11.99, Quantity = 20, Refills = 0, Strength = "200mg", UserId = "b4cb0919-77b8-48ad-8603-166c33fde263" },
                        new { PrescriptionId = 4, DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsSold = false, Name = "Hydralazine", PrescriptionStatusId = 4, Price = 15.0, Quantity = 30, Refills = 2, Strength = "25mg", UserId = "b4cb0919-77b8-48ad-8603-166c33fde263" },
                        new { PrescriptionId = 5, DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), IsSold = false, Name = "Adderall", PrescriptionStatusId = 1, Price = 200.0, Quantity = 60, Refills = 0, Strength = "20mg", UserId = "b4cb0919-77b8-48ad-8603-166c33fde263" }
                    );
                });

            modelBuilder.Entity("PharmaQueue.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("QueueStatus")
                        .IsRequired();

                    b.HasKey("StatusId");

                    b.ToTable("Status");

                    b.HasData(
                        new { StatusId = 1, QueueStatus = "Entered" },
                        new { StatusId = 2, QueueStatus = "Reviewed" },
                        new { StatusId = 3, QueueStatus = "Filled" },
                        new { StatusId = 4, QueueStatus = "Ready" }
                    );
                });

            modelBuilder.Entity("PharmaQueue.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserRole")
                        .IsRequired();

                    b.HasKey("UserTypeId");

                    b.ToTable("UserType");

                    b.HasData(
                        new { UserTypeId = 1, UserRole = "Employee" },
                        new { UserTypeId = 2, UserRole = "Customer" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PharmaQueue.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PharmaQueue.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PharmaQueue.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PharmaQueue.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PharmaQueue.Models.ApplicationUser", b =>
                {
                    b.HasOne("PharmaQueue.Models.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PharmaQueue.Models.Prescription", b =>
                {
                    b.HasOne("PharmaQueue.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("PharmaQueue.Models.ApplicationUser", "User")
                        .WithMany("Prescriptions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
